import discord
from discord.ext import commands, tasks
from discord.ui import View, Button
import json
from datetime import datetime, timedelta
import re
import pytz

DATA_FILE = "reminders.json"
bg_tz = pytz.timezone("Europe/Sofia")

category_phrases = {
    "—Ä–∞–±–æ—Ç–∞": ("üíº", "–µ –≤—Ä–µ–º–µ –¥–∞ –∑–∞–ø—Ä–µ—Ç–Ω–µ—à —Ä—ä–∫–∞–≤–∏ –∏ –¥–∞ —Ä–∞–±–æ—Ç–∏—à!"),
    "—Å—Ä–µ—â–∞": ("üìÖ", "–Ω–µ –∑–∞–±—Ä–∞–≤—è–π –∑–∞ –≤–∞–∂–Ω–∞—Ç–∞ —Å–∏ —Å—Ä–µ—â–∞!"),
    "–≥–æ—Ç–≤–µ–Ω–µ": ("üç≥", "—Ö–∞–π–¥–µ –∫—ä–º –∫—É—Ö–Ω—è—Ç–∞ ‚Äì –≤—Ä–µ–º–µ –µ –∑–∞ –≤–∫—É—Å–Ω–æ –≥–æ—Ç–≤–µ–Ω–µ!"),
    "—á–∏—Å—Ç–µ–Ω–µ": ("üßπ", "–Ω–µ–∫–∞ –¥–æ–º—ä—Ç –∑–∞–±–ª–µ—Å—Ç–∏ ‚Äì –≤—Ä–µ–º–µ –µ –∑–∞ —á–∏—Å—Ç–µ–Ω–µ!"),
    "—Ä–∞–∑—Ö–æ–¥–∫–∞": ("üö∂‚Äç‚ôÇÔ∏è", "–∏–∑–ª–µ–∑ –∏ —Å–µ –Ω–∞—Å–ª–∞–¥–∏ –Ω–∞ —Å–≤–µ–∂–∏—è –≤—ä–∑–¥—É—Ö!"),
    "–ø–∞–∑–∞—Ä": ("üõçÔ∏è", "—Ç—Ä—è–±–≤–∞ –¥–∞ –æ—Ç—Å–∫–æ—á–∏—à –¥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –∑–∞ –ø–∞–∑–∞—Ä—É–≤–∞–Ω–µ!"),
    "—Å—ä–Ω": ("üò¥", "–≤—Ä–µ–º–µ –µ –∑–∞ —Å–ª–∞–¥–∫–∏ —Å—ä–Ω–∏—â–∞ ‚Äì –ª—è–≥–∞–π —Å–∏!"),
    "—Å—ä–±—É–∂–¥–∞–Ω–µ": ("‚è∞", "—Å—ä–±—É–¥–∏ —Å–µ ‚Äì –Ω–æ–≤–∏—è—Ç –¥–µ–Ω —Ç–µ –æ—á–∞–∫–≤–∞!"),
    "—Å–ø–æ—Ä—Ç": ("üèãÔ∏è", "–¥–≤–∏–∂–µ–Ω–∏–µ—Ç–æ –µ –∑–¥—Ä–∞–≤–µ ‚Äì –≤—Ä–µ–º–µ –µ –∑–∞ —Å–ø–æ—Ä—Ç!"),
    "–ª–µ–∫–∞—Ä—Å—Ç–≤–æ": ("üíä", "–Ω–µ –∑–∞–±—Ä–∞–≤—è–π –¥–∞ —Å–∏ –≤–∑–µ–º–µ—à –ª–µ–∫–∞—Ä—Å—Ç–≤–æ—Ç–æ!"),
    "–ª—é–±–æ–≤": ("‚ù§Ô∏è", "–ø–æ–∫–∞–∂–∏ –æ–±–∏—á –Ω–∞ –ª—é–±–∏–º–∏—Ç–µ —Å–∏ —Ö–æ—Ä–∞!"),
    "–∑–∞–±–∞–≤–ª–µ–Ω–∏–µ": ("üî•", "–æ—Ç–ø—É—Å–Ω–∏ —Å–µ ‚Äì –≤—Ä–µ–º–µ –µ –∑–∞ –∑–∞–±–∞–≤–ª–µ–Ω–∏–µ!"),
    "—É—á–µ–Ω–µ": ("üìö", "—Ä–∞–∑—à–∏—Ä–∏ –∑–Ω–∞–Ω–∏—è—Ç–∞ —Å–∏ ‚Äì –≤—Ä–µ–º–µ –µ –∑–∞ —É—á–µ–Ω–µ!"),
    "—Å–µ–º–µ–π—Å—Ç–≤–æ": ("üë®‚Äçüë©‚Äçüëß‚Äçüë¶", "–ø—Ä–µ–∫–∞—Ä–∞–π —Ü–µ–Ω–Ω–∏ –º–∏–≥–æ–≤–µ —Å—ä—Å —Å–µ–º–µ–π—Å—Ç–≤–æ—Ç–æ!"),
    "–ø—Ä–∞–∑–Ω–∏–∫": ("üéâ", "–æ—Ç–±–µ–ª–µ–∂–∏ –ø—Ä–∞–∑–Ω–∏–∫–∞ –ø–æ–¥–æ–±–∞–≤–∞—â–æ!"),
    "—Ñ–∏–Ω–∞–Ω—Å–∏": ("üí∞", "–≤—Ä–µ–º–µ –µ –¥–∞ –æ–±—ä—Ä–Ω–µ—à –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ç–µ —Å–∏!"),
    "–ø–∏–µ–Ω–µ": ("üçª", "–Ω–∞–ª–µ–π —Å–∏ –Ω–µ—â–æ –ø—Ä–∏—è—Ç–Ω–æ –∑–∞ –ø–∏–µ–Ω–µ!"),
    "–º—É–∑–∏–∫–∞": ("üé∂", "–ø—É—Å–Ω–∏ –ª—é–±–∏–º–∞—Ç–∞ —Å–∏ –º—É–∑–∏–∫–∞ –∏ —Å–µ –Ω–∞—Å–ª–∞–¥–∏!"),
    "–ø—É—à–µ–Ω–µ": ("üö¨", "–∞–∫–æ –¥—ä—Ä–∂–∏—à ‚Äì –≤—Ä–µ–º–µ –µ –∑–∞ –ø–æ—á–∏–≤–∫–∞ —Å —Ü–∏–≥–∞—Ä–∞!"),
    "–¥—Ä—É–≥–æ": ("üîî", "–Ω–µ –∑–∞–±—Ä–∞–≤—è–π –∫–∞–∫–≤–æ—Ç–æ —Å–∏ –ø–ª–∞–Ω–∏—Ä–∞–ª!")
}

def load_reminders():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return []

def save_reminders(reminders):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(reminders, f, ensure_ascii=False, indent=2)

class CategoryView(View):
    def __init__(self, author, message):
        super().__init__(timeout=60)
        self.author = author
        self.message = message
        for emoji, label in [
            ("üíº", "—Ä–∞–±–æ—Ç–∞"), ("üìÖ", "—Å—Ä–µ—â–∞"), ("üç≥", "–≥–æ—Ç–≤–µ–Ω–µ"),
            ("üßπ", "—á–∏—Å—Ç–µ–Ω–µ"), ("üö∂‚Äç‚ôÇÔ∏è", "—Ä–∞–∑—Ö–æ–¥–∫–∞"), ("üõçÔ∏è", "–ø–∞–∑–∞—Ä"),
            ("üò¥", "—Å—ä–Ω"), ("‚è∞", "—Å—ä–±—É–∂–¥–∞–Ω–µ"), ("üèãÔ∏è", "—Å–ø–æ—Ä—Ç"),
            ("üíä", "–ª–µ–∫–∞—Ä—Å—Ç–≤–æ"), ("‚ù§Ô∏è", "–ª—é–±–æ–≤"), ("üî•", "–∑–∞–±–∞–≤–ª–µ–Ω–∏–µ"),
            ("üìö", "—É—á–µ–Ω–µ"), ("üë®‚Äçüë©‚Äçüëß‚Äçüë¶", "—Å–µ–º–µ–π—Å—Ç–≤–æ"), ("üéâ", "–ø—Ä–∞–∑–Ω–∏–∫"),
            ("üí∞", "—Ñ–∏–Ω–∞–Ω—Å–∏"), ("üçª", "–ø–∏–µ–Ω–µ"), ("üé∂", "–º—É–∑–∏–∫–∞"),
            ("üö¨", "–ø—É—à–µ–Ω–µ"), ("üîî", "–¥—Ä—É–≥–æ")
        ]:
            button = Button(label=label, emoji=emoji, style=discord.ButtonStyle.primary)
            button.callback = self.create_callback(label)
            self.add_item(button)

    async def on_timeout(self):
        try:
            await self.message.delete()
        except:
            pass

    def create_callback(self, label):
        async def callback(interaction: discord.Interaction):
            if interaction.user != self.author:
                await interaction.response.send_message("–¢–æ–≤–∞ –º–µ–Ω—é –Ω–µ –µ –∑–∞ —Ç–µ–±!", ephemeral=True)
                return

            await interaction.message.delete()

            prompt_msg = await interaction.channel.send("**‚û°Ô∏è –ù–∞ –∫–æ–≥–æ –¥–∞ –Ω–∞–ø–æ–º–Ω—è? (–ø–æ—Å–æ—á–∏ @–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏ \"–º–µ–Ω\")**")

            def check_user(m):
                return m.author == self.author and m.channel == interaction.channel

            user_msg = await interaction.client.wait_for("message", check=check_user)
            await user_msg.delete()
            await prompt_msg.delete()

            target_user = self.author.id
            if user_msg.mentions:
                target_user = user_msg.mentions[0].id

            time_prompt = await interaction.channel.send("**‚û°Ô∏è –í—ä–≤–µ–¥–∏ —á–∞—Å –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç HH:MM (–±—ä–ª–≥–∞—Ä—Å–∫–æ –≤—Ä–µ–º–µ):**")

            time_msg = await interaction.client.wait_for("message", check=check_user)

            try:
                hour, minute = map(int, time_msg.content.split(":"))
                now = datetime.now(bg_tz)
                remind_time = bg_tz.localize(datetime(now.year, now.month, now.day, hour, minute))
                if remind_time < now:
                    remind_time += timedelta(days=1)

                cog = interaction.client.get_cog("ReminderCog")
                if cog:
                    cog.reminders.append({
                        "time": remind_time.isoformat(),
                        "text": label,
                        "channel": interaction.channel.id,
                        "user": target_user,
                        "creator": self.author.id
                    })
                    save_reminders(cog.reminders)

            except:
                await interaction.channel.send("‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω —Ñ–æ—Ä–º–∞—Ç –∑–∞ —á–∞—Å! –ò–∑–ø–æ–ª–∑–≤–∞–π HH:MM.")

            await time_msg.delete()
            await time_prompt.delete()

        return callback

class ReminderCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.reminders = load_reminders()
        self.reminder_checker.start()

    def cog_unload(self):
        self.reminder_checker.cancel()

    async def send_reminder(self, rem):
        channel = self.bot.get_channel(rem["channel"])
        if not channel:
            return

        emoji, phrase = category_phrases.get(rem["text"], ("üîî", f"–Ω–µ –∑–∞–±—Ä–∞–≤—è–π –∑–∞ {rem['text']}"))

        creator_mention = f"<@{rem['creator']}>"
        target_mention = f"<@{rem['user']}>"

        if rem["creator"] == rem["user"]:
            msg = f"{emoji} –•–µ–π {creator_mention}! –ù–∞–ø–æ–º–Ω—è–Ω–µ –∑–∞ —Ç–µ–±: {phrase}"
        else:
            msg = f"{emoji} {creator_mention} —Ç–∏ –Ω–∞–ø–æ–º–Ω—è {target_mention}: {phrase}"

        await channel.send(msg)

    @tasks.loop(seconds=30)
    async def reminder_checker(self):
        now = datetime.now(bg_tz)
        to_remove = []

        for rem in self.reminders:
            remind_time = datetime.fromisoformat(rem["time"])
            if now >= remind_time:
                await self.send_reminder(rem)
                to_remove.append(rem)

        for rem in to_remove:
            self.reminders.remove(rem)
        if to_remove:
            save_reminders(self.reminders)

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        if message.author.bot:
            return

        content = message.content.strip().lower()
        if content.startswith("–Ω–∞–ø–æ–º–Ω–∏ –º–∏") or content.startswith("–Ω–∞–ø–æ–º–Ω–∏"):
            match = re.search(r"–Ω–∞–ø–æ–º–Ω–∏ (.+) –≤ (\d{1,2}):(\d{2})", message.content, re.IGNORECASE)
            if match:
                text = match.group(1).strip()
                hour, minute = int(match.group(2)), int(match.group(3))
                now = datetime.now(bg_tz)
                remind_time = bg_tz.localize(datetime(now.year, now.month, now.day, hour, minute))
                if remind_time < now:
                    remind_time += timedelta(days=1)

                self.reminders.append({
                    "time": remind_time.isoformat(),
                    "text": text,
                    "channel": message.channel.id,
                    "user": message.author.id,
                    "creator": message.author.id
                })
                save_reminders(self.reminders)
                await message.reply(f"‚úÖ –©–µ —Ç–∏ –Ω–∞–ø–æ–º–Ω—è –∑–∞ '{text}' –≤ {hour:02d}:{minute:02d}.")
                return

            await message.delete()
            sent = await message.channel.send("**‚û°Ô∏è –ò–∑–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –∑–∞ –∫–æ—è—Ç–æ –¥–∞ –ø–æ–ª—É—á–∏—à –Ω–∞–ø–æ–º–Ω—è–Ω–µ:**")
            view = CategoryView(message.author, sent)
            await sent.edit(view=view)

async def setup(bot):
    await bot.add_cog(ReminderCog(bot))



