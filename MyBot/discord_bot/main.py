import discord
from discord.ext import commands
import os
import json
import logging
import asyncio
import sys
import re
import time
from dotenv import load_dotenv
from openai import OpenAI

load_dotenv()
CONFIG_PATH = os.path.join(os.path.dirname(__file__), "bot_content.json")

config = {}
if os.path.exists(CONFIG_PATH):
    try:
        with open(CONFIG_PATH, "r", encoding="utf-8") as f:
            config = json.load(f)
    except json.JSONDecodeError as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –≤ bot_content.json: {e}")

TOKEN = config.get("DISCORD_TOKEN") or os.getenv("DISCORD_TOKEN")
OPENAI_KEY = config.get("OPENAI_API_KEY") or os.getenv("OPENAI_API_KEY")
PREFIX = config.get("PREFIX") or os.getenv("PREFIX") or "!"

if not TOKEN:
    print("‚ùå –õ–∏–ø—Å–≤–∞ DISCORD_TOKEN!")
    sys.exit(1)
if not OPENAI_KEY:
    print("‚ùå –õ–∏–ø—Å–≤–∞ OPENAI_API_KEY!")
    sys.exit(1)

client_ai = OpenAI(api_key=OPENAI_KEY)

logging.basicConfig(
    filename="bot_errors.log",
    level=logging.ERROR,
    format="%(asctime)s:%(levelname)s:%(name)s: %(message)s"
)

intents = discord.Intents.default()
intents.message_content = True
intents.members = True
intents.presences = True  # ‚úÖ –î–æ–±–∞–≤–µ–Ω–æ –∑–∞ –¥–∞ —Ä–∞–±–æ—Ç—è—Ç —Å—Ç–∞—Ç—É—Å–∏—Ç–µ

bot = commands.Bot(command_prefix=PREFIX, intents=intents)
bot.client_ai = client_ai


def is_bulgarian(text: str) -> bool:
    return bool(re.search(r"[–ê-–Ø–∞-—è]", text))


def translate_to_bg(text: str) -> str:
    response = client_ai.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "–ü—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω –±—ä–ª–≥–∞—Ä—Å–∫–∏ –µ–∑–∏–∫."},
            {"role": "user", "content": text}
        ]
    )
    return response.choices[0].message.content.strip()


async def load_cogs():
    cogs_path = os.path.join(os.path.dirname(__file__), "cogs")
    if not os.path.exists(cogs_path):
        print(f"‚ö†Ô∏è –ü–∞–ø–∫–∞—Ç–∞ {cogs_path} –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–º cogs.")
        return

    for filename in os.listdir(cogs_path):
        if filename.endswith(".py") and filename != "__init__.py":
            try:
                await bot.load_extension(f"cogs.{filename[:-3]}")
                print(f"‚úÖ –ó–∞—Ä–µ–¥–µ–Ω cog: {filename}")
            except Exception as e:
                print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ {filename}: {e}")


@bot.event
async def on_ready():
    print(f"ü§ñ –ë–æ—Ç—ä—Ç –µ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω –∫–∞—Ç–æ {bot.user} | –ü—Ä–µ—Ñ–∏–∫—Å: {PREFIX}")


@bot.event
async def on_message(message: discord.Message):
    if message.author.bot:
        return

    await bot.process_commands(message)

    if hasattr(message, "is_handled") and message.is_handled:
        return

    blocked_keywords = [
        "–Ω–æ–≤–∏–Ω–∏", "–Ω–æ–≤–æ—Ç–æ",
        "–≤—Ä–µ–º–µ—Ç–æ", "—á–∞—Å—ä—Ç", "—á–∞—Å–∞",
        "–≤–∞–ª—É—Ç–∞", "–∫—É—Ä—Å", "–¥–æ–ª–∞—Ä", "–ª–µ–≤", "–µ–≤—Ä–æ",
        "—Ö–æ—Ä–æ—Å–∫–æ–ø", "–∑–æ–¥–∏—è", "–∑–æ–¥–∏–∏—Ç–µ"
    ]

    lower_msg = message.content.lower()
    if any(word in lower_msg for word in blocked_keywords):
        return

    try:
        response = client_ai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–û—Ç–≥–æ–≤–∞—Ä—è–π –≤–∏–Ω–∞–≥–∏ –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏ –µ–∑–∏–∫."},
                {"role": "user", "content": message.content}
            ]
        )

        reply = response.choices[0].message.content.strip()
        if not is_bulgarian(reply):
            reply = translate_to_bg(reply)

        await message.channel.send(reply)

    except Exception as e:
        print(f"AI Error: {e}")
        await message.channel.send("‚ö†Ô∏è –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ AI –æ—Ç–≥–æ–≤–æ—Ä–∞.")


async def start_bot():
    async with bot:
        await load_cogs()
        await bot.start(TOKEN)


if __name__ == "__main__":
    while True:
        try:
            asyncio.run(start_bot())
        except KeyboardInterrupt:
            print("‚õî –ë–æ—Ç—ä—Ç –µ —Å–ø—Ä—è–Ω —Ä—ä—á–Ω–æ.")
            break
        except Exception as e:
            print(f"‚ö†Ô∏è –ì—Ä–µ—à–∫–∞: {e}")
            print("üîÑ –†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ —Å–ª–µ–¥ 5 —Å–µ–∫—É–Ω–¥–∏...")
            time.sleep(5)










































